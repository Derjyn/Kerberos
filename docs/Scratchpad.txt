///////////////////////////////////////////////////////////////////////////////
//
//	FILE		: scratchpad.txt
//
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
//	CORE FUNCTIONALITY
//  Core stuff- the central heart of the Kerberos engine.
	
	* Core controls the heartbeat of Kerberos
		* Talks with SystemFactory to handle systems
		* Talks with ModuleFactory to handle modules
	* Logger logs stuff
	* Timer handles timing and such


///////////////////////////////////////////////////////////////////////////////
//	SYSTEMS
//  Systems contain the meat and potatoes of Kerberos.
//  Systems are singletons- there can be only one.

	* SystemFactory controls systems
	* SystemAudio handles audio
	* SystemGUI handles user interface
	* SystemInput handles input
	* SystemPhysics handle physics
	* SystemRender handles rendering
	* SystemScript handles scripting related stuff
	* SystemWorld handles the virtual "world", the evironment, time, physical
	  properties, etc


///////////////////////////////////////////////////////////////////////////////
//	MODULES
//	Modules extend systems, and add more functionality.

	* ModuleDebug handles debug info and console display


///////////////////////////////////////////////////////////////////////////////
//	TRICKS?
//  Various tips and tricks applied or found curious

	* Sounds like the Phoenix Singleton (http://goo.gl/5TGBjZ) pattern is cool
	* I used to use UPX to compress the Kerberos exe and various *.dlls, but 
	  after some testing by running Kerberos 4 times uncompressed and compressed, 
	  I found that there was an average delay of ~200ms for initialization of 
	  various systems. While saving around 10mb for release is nice, it is a
	  small price to pay for saving seconds during initialization!



// EOF ////////////////////////////////////////////////////////////////////////